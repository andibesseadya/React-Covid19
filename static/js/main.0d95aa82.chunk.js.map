{"version":3,"sources":["CountryPicker.js","App.js","serviceWorker.js","index.js"],"names":["CountryPicker","props","fetchCountries","axios","get","then","response","setState","countries","data","handleChange","event","value","target","handleCountryChange","state","country","this","FormControl","NativeSelect","onChange","map","c","name","Component","CoronaTracker","confirm","confirmed","deaths","recovered","lastupdate","lastUpdate","getData","confirmGlobal","deathsGlobal","recoveredGlobal","lastupdateGlobal","catch","error","console","log","Fragment","className","Date","toDateString","start","end","duration","separator","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0d95aa82.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\n\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport default class CountryPicker extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            countries:[],\r\n            country:\"\"\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchCountries()\r\n    }\r\n    fetchCountries=()=>{\r\n        axios.get(\"https://covid19.mathdro.id/api/countries\")\r\n        .then(response=>{\r\n            this.setState({\r\n                countries:response.data.countries\r\n            })\r\n        })\r\n    }\r\n    handleChange=(event)=>{\r\n        var value=event.target.value;\r\n        this.props.handleCountryChange(value);\r\n\r\n    }\r\n    render() {\r\n        return (\r\n          <center>\r\n              <FormControl>\r\n                  <NativeSelect onChange={this.handleChange}>\r\n                     <option>Select Country...</option>\r\n                     {\r\n                         this.state.countries.map(c=>(\r\n                         <option key={c.name} value={c.name}>{c.name}</option>\r\n                         ))\r\n                     }\r\n                    \r\n                      </NativeSelect>\r\n                    \r\n                  </FormControl>\r\n              </center>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/corona.css';\nimport CountUp from 'react-countup';\nimport CountryPicker from './CountryPicker'\n\nexport default class CoronaTracker extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            confirmGlobal:null,\n            deathsGlobal:null,\n            recoveredGlobal:null,\n            confirm:null,\n            deaths:null,\n            recovered:null,\n            lastupdate:null,\n            country:null\n\n        }\n    }\n    handleCountryChange=(country)=>{\n        axios.get(\"https://covid19.mathdro.id/api/countries/\" + country)\n        .then(response=>{\n            this.setState({\n                confirm:response.data.confirmed.value,\n                deaths:response.data.deaths.value,\n                recovered:response.data.recovered.value,\n                lastupdate:response.data.lastUpdate\n            })\n        })\n    }\n    componentDidMount(){\n        this.getData();\n    }\n    getData=()=>{\n        axios.get('https://covid19.mathdro.id/api')\n       .then(response=>{\n           this.setState({\n               confirmGlobal:response.data.confirmed.value,\n               deathsGlobal:response.data.deaths.value,\n               recoveredGlobal:response.data.recovered.value,\n               lastupdateGlobal:response.data.lastUpdate\n           })\n       })\n      .catch(error=>{\n          console.log(error.response);\n          \n      })\n    }\n    render() {\n        return (\n          <React.Fragment>\n              <div className=\"corona-body\">\n                  <div className=\"container\">\n                      <div>\n                          <div className=\"name\">\n                              <center>Covid-19 Tracker</center>\n                              </div>\n                      </div>\n                      <center>\n                          <p className=\"lastupdate\">\n                              <u>\n                                  last update: {new Date(this.state.lastupdate).toDateString()}\n                                  </u>\n                          </p>\n                          </center>\n                  </div>\n                    <div className=\"card-deck card-decks\">\n                        <div className=\"card confirm box\">\n                            <div className=\"card-title c-title\">\n                                <center>Confirmed</center>\n                \n                            </div>\n                            <div className=\"card-body c-body text-center\">\n                                <CountUp\n                                start={0}\n                                end={this.state.confirmGlobal}\n                                duration={1}\n                                separator=\",\"\n                                className=\"number\"/>\n                            </div>\n                    </div>\n                    <div className=\"card recovered box\">\n                        <div className=\"card-title c-title\">\n                            <center>Recovered</center>\n                \n                        </div>\n                        <div className=\"card-body c-body text-center\">\n                            <CountUp\n                            start={0}\n                            end={this.state.recoveredGlobal}\n                            duration={1}\n                            separator=\",\"\n                            className=\"number\"/>\n                        </div>\n                    </div>\n                    <div className=\"card deaths box\">\n                        <div className=\"card-title c-title\">\n                            <center>Deaths</center>\n                \n                        </div>\n                        <div className=\"card-body c-body text-center\">\n                            <CountUp\n                            start={0}\n                            end={this.state.deathsGlobal}\n                            duration={1}\n                            separator=\",\"\n                            className=\"number\"/>\n                        </div>\n                    </div>\n                </div>\n\n                  <CountryPicker handleCountryChange={this.handleCountryChange} />\n                  \n                  <div className=\"card-deck card-decks\">\n                   <div className=\"card confirm box\">\n                       <div className=\"card-title c-title\">\n                           <center>Confirmed</center>\n                \n                           </div>\n                           <div className=\"card-body c-body text-center\">\n                               <CountUp\n                               start={0}\n                               end={this.state.confirm}\n                               duration={1}\n                               separator=\",\"\n                               className=\"number\"/>\n                               </div>\n                   </div>\n                   <div className=\"card recovered box\">\n                       <div className=\"card-title c-title\">\n                           <center>Recovered</center>\n                \n                           </div>\n                           <div className=\"card-body c-body text-center\">\n                               <CountUp\n                               start={0}\n                               end={this.state.recovered}\n                               duration={1}\n                               separator=\",\"\n                               className=\"number\"/>\n                               </div>\n                   </div>\n                   <div className=\"card deaths box\">\n                       <div className=\"card-title c-title\">\n                           <center>Deaths</center>\n                \n                           </div>\n                           <div className=\"card-body c-body text-center\">\n                               <CountUp\n                               start={0}\n                               end={this.state.deaths}\n                               duration={1}\n                               separator=\",\"\n                               className=\"number\"/>\n                               </div>\n                   </div>\n                   </div>\n                 \n                  </div>\n                 \n\n              \n            </React.Fragment>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}